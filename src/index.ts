import { parse } from 'node-html-parser'

import { KVNamespace, ExecutionContext } from '@cloudflare/workers-types'

const SECURITY_PAGE = 'https://support.apple.com/en-us/HT201222'
const STRING = /actively\sexploited/

export default {
  async fetch(
    _request: Request,
    env: {
      TOKEN: string
      CHAT_ID: string
      STORE: KVNamespace
    },
    _ctx: ExecutionContext
  ): Promise<Response> {
    const BOT = `https://api.telegram.org/bot${env.TOKEN}`

    const sendMessage = async (
      text: string,
      options?: { [key: string]: unknown }
    ) => {
      const body = {
        chat_id: env.CHAT_ID,
        text,
        ...options,
      }

      const req = await fetch(`${BOT}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      })

      if (!req.ok) {
        console.log(await req.json())
      }
    }

    const req = await fetch(SECURITY_PAGE)
    const res = await req.text()

    if (!req.ok) {
      console.log(res)
      return new Response('failed to load main support page')
    }

    const parsed = parse(res)

    const rows = parsed.querySelectorAll('tr').slice(1) // without heading row

    const latestItemId = rows[0].querySelector('td')!.innerText

    const checkpoint = await env.STORE.get('checkpoint')

    if (checkpoint && checkpoint === latestItemId) {
      return new Response('nothing to do')
    }

    // Rows: name with optional link - description - date
    for (const row of rows) {
      const link = row.querySelector('a')
      const [name, descr, date] = row
        .querySelectorAll('td')
        .map((x) => x.firstChild.innerText)
      if (link) {
        const href = link.attributes.href.toString()

        const req = await fetch(href)
        const res = await req.text()

        if (!req.ok) {
          console.log(res)
          return new Response('failed to load individual support page')
        }

        const isExploited = STRING.test(res)

        if (isExploited) {
          await sendMessage(
            [
              `Actively exploited: ${name}`,
              descr,
              `Added ${date}`,
              `<a href="${href}">Support Document</a>`,
            ].join('\n\n'),
            { parse_mode: 'HTML' }
          )
        }
      }
    }

    await env.STORE.put('checkpoint', latestItemId)

    return new Response('work done')
  },
}
